vector<int> computeLPS(string pattern)
{
    int n = pattern.size();
    vector<int> lps(n,0);
    int len = 0, i = 1;
    while(i < n)
    {
        if(pattern[i] == pattern[len])
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if(len != 0)
            {
                len = lps[len - 1];
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}
vector<int> stringMatch(string text, string pattern) {
	vector<int> lps = computeLPS(pattern);
    vector<int> res;
    int  n = text.size(), m = pattern.size();
    int i = 0,j = 0;
    while(i < n)
    {
        if(text[i] == pattern[j])
        {
            i++;
            j++;
        }
        if(j == m)
        {
// Just write (i - j) if want 0 based indexing
            res.push_back(i - j + 1);
            j = lps[j - 1];
        }
        else if(text[i] != pattern[j])
        {
            if(j != 0)
            {
                j = lps[j - 1];
            }
            else
            {
                i++;
            }
        }
    }
    return res;
}
